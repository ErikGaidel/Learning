# -*- coding: utf-8 -*-
"""alg_rabina_carpa_textv0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1op6GMW_K_OhIaLBxg1YLeBeG1OuSocRv
"""

from collections import deque


def hash_polinom(text:str, pow_t:int, x:int = 1,  p:int = 1_000_000_007):
    hash = ord(text[0])
    for i in range(1,pow_t):
        x = pow(x,i,p)
        hash += ord(text[i]) * x
        hash %= p
    return hash, x


def alg_rabina_carpa(patt:str,text:str):
    n, N, x = len(patt), len(text), 1 # random.randint(1,p-1)
    p = 1_000_000_007 
    h_t, fact = hash_polinom(text[-n::], n)
    h_p, fact = hash_polinom(patt, n)

    window = deque([(t,i) for i,t in enumerate(text[-n::])])
    text = deque([(t,i) for i,t in enumerate(text[:(N-n)])])
    ans_table = []
    if h_t==h_p:
        for i in range(n):
            if window[i][0] != patt[i]:
                break
        else:
            ans_table.append(N-n)

    while text:
        ch = text.pop()
        prev_ch = window.pop()
        window.appendleft(ch)
        h_t = ((h_t - ord(prev_ch[0]) * fact) * x + ord(ch[0])) %p
        if h_t==h_p:
            for i in range(n):
               if window[i][0] != patt[i]:
                    break
            else:
                ans_table.append(ch[1])
    return ans_table
    

def test():
    assert alg_rabina_carpa("aba","abacaba") == [4, 0]
    assert alg_rabina_carpa("Test","testTesttesT") == [4]
    assert alg_rabina_carpa("aaaaa","baaaaaaa") == [3,2,1]


def main():
    patt, text = input(), input()
    ans_table = alg_rabina_carpa(patt,text)
    print(*ans_table[::-1])


if __name__ == "__main__":
    main()