# -*- coding: utf-8 -*-
"""alg_rabina_carpa_textv1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1op6GMW_K_OhIaLBxg1YLeBeG1OuSocRv
"""

from collections import deque


def hash_polinom(text:str, pow_t:int, p:int = 1_000_000_007):
    hash = ord(text[0])
    for i in range(1,pow_t):
        hash += ord(text[i]) 
        hash %= p
    return hash


def alg_rabina_carpa(patt:str,text:str):
    n, N = len(patt), len(text)
    p = 1_000_000_007 
    h_t = hash_polinom(text[:n], n)
    h_p = hash_polinom(patt, n)

    window = text[:n]
    ans_table = []
    if h_t==h_p and window == patt:
        ans_table.append(0)

    for i in range(1, N-n+1):
        window = text[i:n+i]
        h_t = ((h_t - ord(text[i-1]))  + ord(text[i+n-1])) % p
        if h_t==h_p and window == patt:
            ans_table.append(i)
    return ans_table
    

def test():
    assert alg_rabina_carpa("aba","abacaba") == [4, 0]
    assert alg_rabina_carpa("Test","testTesttesT") == [4]
    assert alg_rabina_carpa("aaaaa","baaaaaaa") == [3,2,1]


def main():
    patt, text = input(), input()
    ans_table = alg_rabina_carpa(patt,text)
    print(*ans_table)


if __name__ == "__main__":
    main()