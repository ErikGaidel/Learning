# -*- coding: utf-8 -*-
"""buff_socket.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rVUBrORt_hRxQbXU00uq_185mUcMUGxC
"""

from collections import deque


def socket_buff(buff:list, b_s:int, n:int):
    """ return time when work with each socket start or -1 if it was droped """
    if not buff:
        return None
    work_q = deque([buff[0]])
    for i in range(1,b_s):
        work_q.append([max(buff[i][0],work_q[i-1][1]), work_q[i-1][1]+buff[i][1]])

    ans = [w[0] for w in work_q]  

    for i in range(b_s,n):
        if work_q[0][1] <= buff[i][0]:
            m = max(buff[i][0],work_q[-1][1])
            ans.append(m)
            work_q.append([m, work_q[-1][1]+buff[i][1]])
            work_q.popleft() 
        else:
            ans.append(-1)
                        
    return ans


def main():
    buff_size, n = map(int, input().split())
    buff = []
    for _ in range(n):
        socket = input().split()
        buff.append([int(socket[0]), int(socket[1])])
    ans = socket_buff(buff, buff_size, n)
    if ans:
        print(*ans, sep="\n")
    
    

def test():

    assert socket_buff([[0,1],[0,1]], 1, 2) == [0,-1]
    assert socket_buff([[0,1],[1,1]], 1, 2) == [0, 1]
    assert socket_buff([[0,0]], 1, 1) == [0]
    assert socket_buff([], 1, 0) == None
    assert socket_buff([[0,1]], 1, 1) == [0]

    assert socket_buff([[0,1],[0,1],[1,2]], 2, 3) == [0,1,2]
    assert socket_buff([[0,1],[0,1],[1,2]], 1, 3) == [0,-1,1]
    assert socket_buff([[0,1],[0,4],[1,3],[1,2],[1,3],[2,1],[3,10],[4,1],
                        [5,2],[6,1]], 3, 10) == [0,1,5,8,-1,-1,-1,-1,10,-1]


if __name__ == "__main__":
    main()