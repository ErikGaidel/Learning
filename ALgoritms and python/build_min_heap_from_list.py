# -*- coding: utf-8 -*-
"""build_min_heap_from_list.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17O2bD7yohpfeyCmfIui85neuPZO2NuVk
"""

ans = []
def SiftDown(A:list, k:int, n:int):
    min_ind = k
    l = 2 * k + 1
    r = 2 * k + 2

    if l < n and A[l] < A[min_ind]:# and A[l]<A[r]:
        min_ind = l
    if r < n and A[r] < A[min_ind]:# and A[r]<A[l]:
        min_ind = r

    if k != min_ind:
        A[k], A[min_ind] = A[min_ind], A[k]
        ans.append([k, min_ind])
        return SiftDown(A,min_ind,n)
    else:
        return A


def build_heap(A:list,n:int):
    size = n
    for i in range((n-1)//2, -1,-1):
        A = SiftDown(A,i,size)
    return A


n = int(input())
A = list(map(int,input().split()))
A = build_heap(A,n)
print(len(ans))
for w in ans:
    print(*w)