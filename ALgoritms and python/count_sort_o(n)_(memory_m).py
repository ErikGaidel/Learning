# -*- coding: utf-8 -*-
"""count_sort_O(n)_(memory_M).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aMQ7QCdqDPB_Oa-PsEL6lSbHabkfAJ6R
"""

def count_sort(A):
    """сортировка подсчетом списка А"""
    F, n = dict(), len(A)
    for i in range(n):
        if A[i] in F.keys():
            F[A[i]] += 1 
        else:
            F[A[i]] = 1
    A.clear()
    K = list(F.keys())
    K.sort()
    for k in K:
        A += F[k] * [k]
    return A


def test_sort(sort_alg):
    """тестирование сортировки sort_alg"""    
    print("Тестируется", sort_alg.__doc__)
    assert sort_alg([]) == []
    assert sort_alg([3,3,3,3,3]) == [3,3,3,3,3]
    assert sort_alg([4,2,5,1,3]) == [1,2,3,4,5]
    assert sort_alg(list(range(10,20))+list(range(0,10))) == list(range(20))
    assert sort_alg([4,2,4,2,1,0]) == [0,1,2,2,4,4]
    assert sort_alg([4,-12,-44,-44,2,1]) == [-44,-44,-12,1,2,4]
    assert sort_alg([4,-12,-12,-12,0,-44,2,1]) == [-44,-12,-12,-12,0,1,2,4]
    assert sort_alg([1,0,1,2,9,0,2,3,3,5,5,4,4,0,4,7,9,8,3,0,3,4,6,6,4,6,3,2]) \
    == [0,0,0,0,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,6,6,6,7,8,9,9]
    print("Ok")


def test():
    """тестирование имеющихся сортировок"""
    test_sort(count_sort)


if __name__ == "__main__":
    test()