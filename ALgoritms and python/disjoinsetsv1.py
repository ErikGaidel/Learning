# -*- coding: utf-8 -*-
"""disjoinsetsv1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZR4amMMlwl3w-zGmyDqfzOsgNRy8hLxt
"""

def union_sets(d:int, s:int,  parents:list, rank:list, max_r:int):
    while parents[d] != d:
        d = parents[d]
    while parents[s] != s:
        s = parents[s]
    if s==d: return max_r, parents, rank
    rank[d] += rank[s]
    rank[s] = 0
    parents[s] = d
    return max(max_r, rank[d]), parents, rank

input = input().split()
n, m = int(input[0]), int(input[1])
parents = [i for i in range(n)]
rank = [r for r in map(int,input().split())]
max_r = max(rank)
for _ in range(m):
    destination, source = map(int,input().split())
    max_r, parents, rank = union_sets(destination-1,source-1,parents,rank,max_r)
    print(max_r)