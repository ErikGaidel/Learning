# -*- coding: utf-8 -*-
"""hash_tab_chain_polinom.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lrd9-K0TMNChXEQgS6NJQqARNANWjjro
"""

from collections import deque

def hash_polinom(text:str, m:int):
    x = 263
    p = 1_000_000_007
    pow_t = len(text)
    hash = ord(text[0])
    for i in range(1,pow_t):
        hash += ord(text[i]) * x
        x *= 263
        x %= p
        hash %= p
    hash %= m
    return hash


class HashTable():
    def __init__(self):
        self.hashtab = dict()
    
    def _find(self,text:str, m:int, H:int = -1, inp:int = 1):
        if H == -1:
            H = hash_polinom(text, m)
        if H in self.hashtab.keys() and text in self.hashtab[H]:
            if inp: print("yes")
            return "yes"
        if inp: print("no")
        return "no"

    def _add(self, text:str, m:int):
        H = hash_polinom(text, m)
        if self._find(text, m, H, 0) == "yes":
            return
        if H in self.hashtab.keys():
            self.hashtab[H].appendleft(text)
        else:
            self.hashtab[H] = deque([text])


    def _del(self, text:str, m:int):
        H = hash_polinom(text, m)
        if self._find(text, m, H, 0) == "yes":
            L = len(self.hashtab[H])
            if L<=1:
                self.hashtab.pop(H)
                return
            self.hashtab[H].remove(text)
    
    def _check(self,num:int, m:int):
        if self.hashtab.get(num):
            print(*self.hashtab[num])
            return
        print("")


def test():
    assert hash_polinom("qaxndhusptgrewo", 25) == 7
    assert hash_polinom("uiljkwhypgmfdst", 250) == 72
    assert hash_polinom("pweiknqgcxazjyh", 2500) == 263
    assert hash_polinom("ilvpygszwdeurjn", 25000) == 9134
    assert hash_polinom("xnzrvwcutfgbqje", 250000) == 170995
    assert hash_polinom("rpqlfogsamhjkic", 2500000) == 954764
    assert hash_polinom("zhjutqslrpyfcoa", 25000000) == 9581368
    assert hash_polinom("kxlcfgpezjmuynv", 250000000) == 127141737


def main():
    m, n = int(input()), int(input())
    ht = HashTable()
    funcs = {'find': lambda text, m: ht._find(text, m),
             'add': lambda text, m: ht._add(text, m),
             'check': lambda num, m: ht._check(int(num), m),
             'del': lambda text, m: ht._del(text, m) }

    for _ in range(n):
        f, *args = input().split()
        funcs[f](*args,m)

if __name__ == "__main__":
    main()