# -*- coding: utf-8 -*-
"""merge_sort_lect_teach.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B5ad-v-TcMikO7zg7YrEjoL3s03C7eBE
"""

con = 0
def merge(A:list, B:list) -> list:
    """ сливает два отсортированных списка в один
        результирующий отсоритрованный список
    """
    C = [0]*(len(A) + len(B))
    i = k = n = 0

    while i < len(A) and k < len(B):
        if A[i] <= B[k]:
            C[n] = A[i]
            i += 1
        else:
            C[n] = B[k]
            k += 1
        n += 1

    while i < len(A):
        C[n] = A[i]
        i+=1
        n+=1
        
    while k < len(B):
        C[n] = B[k]
        k+=1
        n+=1

    return C


def merge_sort(A:list):
    N = len(A)
    if N <= 1:
        return
    middle = N //2
    L = [A[i] for i in range(middle)]
    R = [A[i] for i in range(middle,N)]
    merge_sort(L)
    merge_sort(R)
    C = merge(L,R)
    for i in range(N):
        A[i] = C[i]


def main():
    con = 0
    A = [1,5,2,3,4,1,2,8,3,5]
    merge_sort(A)
    print(A)


if __name__ == "__main__":
    main()