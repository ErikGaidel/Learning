# -*- coding: utf-8 -*-
"""q_sort_dots_in_interv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oIovCJUnhhYUQ3semlRZ6_VjnktX0NHo
"""

import random
from bisect import bisect_left, bisect_right

def search(A:list, el:int, p:bool):
    N = len(A)
    if p:
        if A[-1] < el:
            return N
        elif el < A[0]:
            return 0
        lo = bisect_left(A, el) 
        return lo
    else:
        if A[-1] <= el:
            return N
        elif el < A[0]:
            return 0
        lo = bisect_right(A, el) # i >= lo : A[i] > el
        return lo

def quick_sort(A:list):
    if len(A)<=1:
        return A
    else:
        q=random.choice(A)
        L = [elem for elem in A if elem < q]
        M = [q] * A.count(q)
        R= [elem for elem in A if elem>q]
        return quick_sort(L) + M + quick_sort(R)

def main():
    n, m = map(int,input().split())
    interv_e, interv_b = [],[]
    for _ in range(n):
        interv = input().split()
        interv_b.append(int(interv[0]))
        interv_e.append(int(interv[1]))
    
    dots = list(map(int,input().split()))
   
    interv_b=quick_sort(interv_b)
    interv_e=quick_sort(interv_e)
    count = []
    for dot in dots:
        pos_b = search(interv_b,dot, 0)
        pos_e = search(interv_e,dot, 1)
        
        count.append(pos_b - pos_e)
    print(*count)
        
if __name__=="__main__":
    main()

import random
from bisect import bisect_right, bisect_left

K = [0,1,2,3,4,4,5,6,6,7]
print(bisect_left(K,4)) 
print(bisect_right(K,4))