# -*- coding: utf-8 -*-
"""sorts_O(n2)_insert_choice_bubble.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-LtJDJHEsVKotHfyLHU5kRNVpqcO1qgh
"""

def insert_sort(A:list):
    """сортировка вставками списка А"""
    n = len(A)
    for top in range(1,n):
        k = top
        while k > 0 and A[k-1] > A[k]:
            A[k], A[k-1] = A[k-1], A[k]
            k-=1
    return A


def choice_sort(A:list):
    """сортировка выбором списка А"""
    n = len(A)
    for pos in range(0,n-1):
        for k in range(pos+1, n):
            if A[k] < A[pos]:
                A[k], A[pos] = A[pos], A[k]
    return A


def bubble_sort(A:list):
    """"пузырьковая сортировка списка А"""
    n = len(A)
    for bypass in range(1,n):
        for k in range(0,n-bypass):
            if A[k] > A[k+1]:
                A[k], A[k+1] = A[k+1], A[k]
    return A


def test_sort(sort_alg):
    """тестирование сортировки sort_alg"""    
    print("Тестируется", sort_alg.__doc__)
    assert sort_alg([]) == []
    assert sort_alg([3,3,3,3,3]) == [3,3,3,3,3]
    assert sort_alg([4,2,5,1,3]) == [1,2,3,4,5]
    assert sort_alg(list(range(10,20))+list(range(0,10))) == list(range(20))
    assert sort_alg([4,2,4,2,1,0]) == [0,1,2,2,4,4]
    assert sort_alg([4,-12,-44,2,1]) == [-44,-12,1,2,4]
    assert sort_alg([4,-12,0,-44,2,1]) == [-44,-12,0,1,2,4]
    print("Ok")


def test():
    """тестирование имеющихся сортировок"""
    test_sort(insert_sort)
    test_sort(choice_sort)
    test_sort(bubble_sort)


if __name__ == "__main__":
    test()