# -*- coding: utf-8 -*-
"""stack_with_max_by_0(1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18iRZ_hrSla6nNxJ8Ju4NYYKfSK0oViHC
"""

def work_with_max_stack(command:str, stack:list, stack_max:list):
    """ return stacks afterwork with them by push num, pop, max"""
    max_num = 0
    if "push" in command:
        num = int(command.split()[1])
        stack.append(num)
        if stack_max:
            stack_max.append(max(stack_max[-1], num))
        else:
            stack_max.append(num)
    elif stack and "pop" in command:
        stack.pop()
        stack_max.pop()
    elif "max" in command:
        if stack_max:
            max_num = stack_max[-1]
        print(max_num)
    return max_num, stack, stack_max


def main():
    q = int(input())
    stack = []
    stack_max = []
    for _ in range(q):
        command = input()
        max_num, stack, stack_max = work_with_max_stack(command, stack, stack_max)
            

def test():
    assert work_with_max_stack("pop", [], []) == (0, [], [])
    assert work_with_max_stack("max", [], []) == (0, [], [])
    assert work_with_max_stack("push 1", [], []) == (0, [1], [1])
    assert work_with_max_stack("push 3", [1], [1]) == (0, [1,3], [1,3])
    assert work_with_max_stack("push 2", [1,3], 
                               [1,3]) == (0, [1,3,2], [1,3,3])
    assert work_with_max_stack("max", [1,3,2], 
                               [1,3,3]) == (3, [1,3,2], [1,3,3])


if __name__ == "__main__":
    main()